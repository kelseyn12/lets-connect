rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ðŸ•’ WAITING WORDS
    match /waitingWords/{userId} {
      // Users can read, create, update, and delete their own waiting word
      allow read, create, update, delete: if request.auth != null && request.auth.uid == userId;

      // âœ… Allow matchmaking queries (read-only)
      // This lets users search for others waiting on the same "word"
      allow list, get: if request.auth != null;
    }

    // ðŸ’¬ CHAT ROOMS
    match /chatRooms/{roomId} {
      // Read only if you're one of the participants
      allow read: if request.auth != null && request.auth.uid in resource.data.users;

      // Create only if the authenticated user is one of the intended users
      allow create: if request.auth != null
        && request.resource.data.users.size() == 2
        && request.auth.uid in request.resource.data.users
        && request.resource.data.active is bool
        && request.resource.data.createdAt is timestamp;

      // Allow limited updates (active/typing/expiresAt only)
      allow update: if request.auth != null
        && request.auth.uid in resource.data.users
        && request.resource.data.users == resource.data.users
        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([
            'active',
            'typing',
            'expiresAt'
          ]);

      // ðŸš« Prevent deletion from frontend
      allow delete: if false;

      // ðŸ“© MESSAGES inside each chat room
      match /messages/{messageId} {
        // Only participants can read messages
        allow read: if request.auth != null
          && request.auth.uid in get(/databases/$(database)/documents/chatRooms/$(roomId)).data.users;

        // Only participants can send messages
        allow create: if request.auth != null
          && request.auth.uid in get(/databases/$(database)/documents/chatRooms/$(roomId)).data.users
          && request.resource.data.senderId == request.auth.uid
          && request.resource.data.text is string
          && request.resource.data.text.size() <= 500;

        // Allow participants to update seenBy field
        allow update: if request.auth != null
          && request.auth.uid in get(/databases/$(database)/documents/chatRooms/$(roomId)).data.users
          && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['seenBy']);

        // ðŸš« No direct message deletion from frontend
        allow delete: if false;
      }
    }

    // ðŸš« DEFAULT DENY â€” everything else blocked
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
