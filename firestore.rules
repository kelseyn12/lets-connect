rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // âœ… Each user only accesses their own waiting word
    match /waitingWords/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // âœ… Chat rooms
    match /chatRooms/{roomId} {

      // Read/Write only if you're one of the users
      allow read: if request.auth != null && request.auth.uid in resource.data.users;
      allow create: if request.auth != null
        && request.resource.data.users.size() == 2
        && request.auth.uid in request.resource.data.users
        && request.resource.data.active is bool
        && request.resource.data.createdAt is timestamp;

      allow update: if request.auth != null
        && request.auth.uid in resource.data.users
        // Prevent users from adding themselves to othersâ€™ chats or editing user lists
        && request.resource.data.users == resource.data.users
        // Only certain fields allowed to change
        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([
            'active',
            'typing',
            'expiresAt'
          ]);

      // âœ… Messages inside chatRooms
      match /messages/{messageId} {
        allow read: if request.auth != null
          && request.auth.uid in get(/databases/$(database)/documents/chatRooms/$(roomId)).data.users;

        allow create: if request.auth != null
          && request.auth.uid in get(/databases/$(database)/documents/chatRooms/$(roomId)).data.users
          // Validate message fields
          && request.resource.data.senderId == request.auth.uid
          && request.resource.data.text is string
          && request.resource.data.text.size() <= 500
          && request.resource.data.createdAt is timestamp;
      }
    }

    // ðŸš« Remove dev fallback for production
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
